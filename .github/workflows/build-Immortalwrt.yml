#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ImmortalWrt 
run-name: Build ImmortalWrt - ${{ github.ref_name }}/${{ inputs.config_name }}

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: 'hanwckf/immortalwrt-mt798x@openwrt-21.02'
        type: choice
        options:
          - openwrt/openert@main
          - coolsnowwolf/lede@master
          - immortalwrt/immortalwrt@openwrt-23.05
          - hanwckf/immortalwrt-mt798x@openwrt-21.02
      config_name:
        description: 'Config file name'
        type: choice
        options:
           - '.config7981'
           - 'mt7981-ax3000.config'
           - '.config7981.mtwifi-cfg'
           - '360t7-immortalwrt.conf'
        default: '.config7981.mtwifi-cfg'
      use_prebuild_toolchain:
        type: boolean
        default: true
      use_ccache_cache:
        type: boolean
        default: true
      ccache_type:
        type: string
        default: kernel
      debug:
        type: boolean

env:
  REPO_URL: hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: 
  CONFIG_FILE: ${{github.event.inputs.config_name || '.config7981'}}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  determine_targets:
    name: Get target info
    uses: ./.github/workflows/determine-targets.yml
    with:
      config_name: ${{ inputs.config_name }}
      source_branch: ${{ inputs.source_branch }}

  build:
    runs-on: ubuntu-latest
    needs: determine_targets
    permissions:
      actions: write

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Checkout [ ${{ needs.determine_targets.outputs.repo_url }} ]
      uses: actions/checkout@v4
      with:
        repository: ${{ needs.determine_targets.outputs.repo_url }}
        ref: ${{ needs.determine_targets.outputs.repo_branch}}
        path: openwrt

    - name: Initialization environment
      if: inputs.debug == false
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        if [ ${{ inputs.debug }} != "true" ]; then
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update >/dev/null
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true     
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "${TZ}"
        fi
        sudo -E apt-get -y install $(curl -fsSL https://gist.githubusercontent.com/abu9/67e4c9e6c14523d642c868bb81b51ada/raw/immortalwrt.build.dep)

    - name: Build tools
      if: inputs.use_prebuild_toolchain == false
      working-directory: openwrt
      run: |
        touch .config
        echo CONFIG_DEVEL=y >> .config
        echo CONFIG_AUTOREMOVE=y >> .config
        echo CONFIG_CCACHE=y >> .config
        echo CONFIG_BUILD_ALL_HOST_TOOLS=y >> .config
        make defconfig
        make tools/install -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh
        tar -cf tools.tar staging_dir/host build_dir/host

    - name: Prepare custom scripts
      run: |
        [[ -d "files" ]] && mv -f files openwrt/files        
        [[ -e "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        chmod +x ${GITHUB_WORKSPACE}/${DIY_P1_SH} ${GITHUB_WORKSPACE}/${DIY_P2_SH}

    - name: Setup configuration
      run: cp -f ${{ env.CONFIG_FILE }} openwrt/.config

    - name: Load pre-custom script
      working-directory: openwrt
      run: ${GITHUB_WORKSPACE}/${DIY_P1_SH}

    - name: Update and install feeds
      if: inputs.debug == false
      working-directory: openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load post-custom script
      working-directory: openwrt
      run: ${GITHUB_WORKSPACE}/${DIY_P2_SH}

    - name: Restore ccache cache
      id: restore-ccache-cache
      if: inputs.use_ccache_cache
      uses: actions/cache/restore@v4
      with:
        path: openwrt/.ccache
        key: ccache-${{ inputs.ccache_type }}-${{ needs.determine_targets.outputs.target }}/${{ needs.determine_targets.outputs.subtarget }}-${{ hashFiles('openwrt/include/kernel-**') }}
        restore-keys: |
          ccache-${{ inputs.ccache_type }}-${{ needs.determine_targets.outputs.target }}/${{ needs.determine_targets.outputs.subtarget }}-

    - name: Restore tools and toolchain cache
      id: restore-toolchain-cache
      if: inputs.use_prebuild_toolchain 
      uses: actions/cache/restore@v4
      with:
        path: openwrt/tools.tar
        key: ${{ needs.determine_targets.outputs.target }}-${{ needs.determine_targets.outputs.subtarget }}-external-toolchain-${{ hashFiles('openwrt/tools/**','openwrt/toolchain/**') }}
        restore-keys: ${{ needs.determine_targets.outputs.target }}-${{ needs.determine_targets.outputs.subtarget }}-external-toolchain-

    - name: Configure ccache and apply fixes
      if: inputs.use_ccache_cache 
      working-directory: openwrt
      env:
        SYSTEM_CCACHE_CONF: staging_dir/host/etc/ccache.conf
      run: |
        mkdir -p staging_dir/host/etc
        touch $SYSTEM_CCACHE_CONF
        echo compiler_type=gcc >> $SYSTEM_CCACHE_CONF
        [ ${{ inputs.ccache_type }} = 'kernel' ] && echo max_size=400M >> $SYSTEM_CCACHE_CONF

        echo depend_mode=true >> $SYSTEM_CCACHE_CONF
        echo sloppiness=file_macro,locale,time_macros >> $SYSTEM_CCACHE_CONF

        echo CONFIG_CCACHE=y >> .config

    - name: Configure prebuild toolchain
      if: inputs.use_prebuild_toolchain && steps.restore-toolchain-cache.outputs.cache-hit == 'true'
      working-directory: openwrt
      run: |
        tar -xf tools.tar
        
        ./scripts/ext-tools.sh --refresh
        
        echo CONFIG_DEVEL=y >> .config
        echo CONFIG_AUTOREMOVE=y >> .config

        TOOLCHAIN_FILE="external-toolchain/$(ls external-toolchain/ | grep toolchain )"
        tar xf "$TOOLCHAIN_FILE" -C external-toolchain
        rm $TOOLCHAIN_FILE

        ./scripts/ext-toolchain.sh \
          --toolchain external-toolchain/$(ls external-toolchain/ | grep wrt-toolchain)/toolchain-* \
          --overwrite-config \
          --config ${{ needs.determine_targets.outputs.target }}/${{ needs.determine_targets.outputs.subtarget }}

    - name: Show configuration
      working-directory: openwrt
      run: |
        make defconfig
        ./scripts/diffconfig.sh
        
    - name: Download package
      working-directory: openwrt
      id: package
      run: |
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Install tools 
      working-directory: openwrt
      run: make tools/install -j$(nproc) BUILD_LOG=1 || ret=$? ${GITHUB_WORKSPACE}/.github/workflows/scripts/show_build_failures.sh

    - name: Install toolchain 
      working-directory: openwrt
      run: make toolchain/install -j$(nproc) BUILD_LOG=1 || ret=$? ${GITHUB_WORKSPACE}/.github/workflows/scripts/show_build_failures.sh

    - name: Build Kernel
      working-directory: openwrt
      run: make target/compile -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

    - name: Build Kernel Kmods
      working-directory: openwrt
      run: make package/linux/compile -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

    - name: Build external toolchain
      working-directory: openwrt
      run: make target/toolchain/compile -j$(nproc) BUILD_LOG=1 || ret=$? ${GITHUB_WORKSPACE}/.github/workflows/scripts/show_build_failures.sh

    - name: Find external toolchain name
      id: get-toolchain-name
      working-directory: openwrt
      run: |       
        TOOLCHAIN_NAME=$(ls bin/targets/${{ needs.determine_targets.outputs.target }}/${{ needs.determine_targets.outputs.subtarget }} | grep toolchain)
        echo "toolchain-name=$TOOLCHAIN_NAME" >> $GITHUB_OUTPUT

    - name: Package tools and external toolchain
      working-directory: openwrt
      run: |
        mkdir -p external-toolchain && cp -f bin/targets/${{ needs.determine_targets.outputs.target }}/${{ needs.determine_targets.outputs.subtarget }}/${{ steps.get-toolchain-name.outputs.toolchain-name }} external-toolchain/${{ steps.get-toolchain-name.outputs.toolchain-name }}
        tar -cvf tools.tar staging_dir/host build_dir/host external-toolchain

    - name: Upload prebuilt tools and external toolchain
      if: inputs.use_prebuild_toolchain && steps.restore-toolchain-cache.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.determine_targets.outputs.target }}-${{ needs.determine_targets.outputs.subtarget }}-external-toolchain
        path: openwrt/tools.tar

    - name: Update prebuilt tools and toolchain Cache
      if: inputs.use_prebuild_toolchain && steps.restore-toolchain-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: openwrt/tools.tar
        key: ${{ steps.restore-toolchain-cache.outputs.cache-primary-key }}

    - name: Update ccache cache
      if: inputs.use_ccache_cache 
      uses: actions/cache/save@v4
      with:
        path: openwrt/.ccache
        key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

    - name: Build everything
      id: compile
      working-directory: openwrt
      run: |
        make defconfig
        echo -e "$(nproc) thread compile"
        if [ ${{ inputs.debug }} == "true" ]; then
          IGNORE_ERRORS=1 make -j$(nproc)
        else
          make -j$(nproc) BUILD_LOG=1 || ret=$? ${GITHUB_WORKSPACE}/.github/workflows/scripts/show_build_failures.sh
        fi

    - name: Update ccache cache
      if: inputs.use_ccache_cache
      uses: actions/cache/save@v4
      with:
        path: openwrt/.ccache
        key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

    - name: Upload bin directory
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin-${{ needs.determine_targets.outputs.target }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> ${GITHUB_OUTPUT}

    - name: Debug
      working-directory: openwrt
      if: ${{ !cancelled() }} && steps.compile.outcome !='success'
      run: |
        tree -L 4

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware_${{ needs.determine_targets.outputs.DEVICE_NAME }}${{ needs.determine_targets.outputs.FILE_DATE }}
        path: ${{ steps.organize.outputs.FIRMWARE }}

    - name: Upload logs
      if: failure() && steps.compile.outcome=='success'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.determine_targets.outputs.target }}-${{ needs.determine_targets.outputs.subtarget }}-logs
        path: "openwrt/logs"

    - name: Upload config
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: build-config
        path: openwrt/.config

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
