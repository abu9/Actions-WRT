#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ImmortalWrt 
run-name: Build ImmortalWrt - ${{ inputs.config_name }}

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      config_name:
        description: 'Config file name'
        type: choice
        options:
           - '.config7981'
           - 'mt7981-ax3000.config'
      use_prebuild_toolchain:
        type: boolean
        default: true
      use_ccache_cache:
        type: boolean
        default: true
      ccache_type:
        type: string
        default: kernel
      debug:
        type: boolean

env:
  REPO_URL: hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: 
  CONFIG_FILE: ${{github.event.inputs.config_name || '.config7981'}}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  determine_targets:
    name: Determine targets
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.find_targets.outputs.target }}
      subtarget: ${{ steps.find_targets.outputs.subtarget }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkout openwrt source code
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPO_URL }}
        ref: ${{ env.REPO_BRANCH}}
        path: openwrt

    - name: Find targets
      id: find_targets
      run: |
        [[ -d "files" ]] && mv -f files openwrt/files
        [[ -e ${CONFIG_FILE} ]] && cp -f ${CONFIG_FILE} openwrt/.config
        cd openwrt
        make defconfig
        eval "$(grep \
                  -e ^CONFIG_TARGET_BOARD= \
                  -e ^CONFIG_TARGET_SUBTARGET= \
                  .config 2>/dev/null \
         )"
        TARGET=${TARGET:-$CONFIG_TARGET_BOARD}
        SUBTARGET=${SUBTARGET:-$CONFIG_TARGET_SUBTARGET}
        [[ -n ${TARGET} ]] && echo "target=$TARGET" >> ${GITHUB_OUTPUT}
        [[ -n ${SUBTARGET} ]] && echo "subtarget=$SUBTARGET" >> ${GITHUB_OUTPUT}
        echo $TARGET/$SUBTARGET
  build:
    runs-on: ubuntu-latest
    needs: determine_targets
    env: 
      TARGET: ${{ needs.determine_targets.outputs.target }}
      SUBTARGET: ${{ needs.determine_targets.outputs.subtarget }}
    permissions:
      actions: write

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Checkout openwrt source code
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPO_URL }}
        ref: ${{ env.REPO_BRANCH}}
        path: openwrt

    - name: Initialization environment
      if: inputs.debug == false
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "${TZ}"

    - name: Prepare custom scripts
      run: |
        [[ -d "files" ]] && mv -f files openwrt/files        
        [[ -e "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        chmod +x ${GITHUB_WORKSPACE}/${DIY_P1_SH} ${GITHUB_WORKSPACE}/${DIY_P2_SH}

    - name: Load pre-custom script
      working-directory: openwrt
      run: ${GITHUB_WORKSPACE}/${DIY_P1_SH}

    - name: Update and install feeds
      if: inputs.debug == false
      working-directory: openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load post-custom script
      working-directory: openwrt
      run: ${GITHUB_WORKSPACE}/${DIY_P2_SH}

    - name: Setup configuration
      run: cp -f ${{ env.CONFIG_FILE }} openwrt/.config

    - name: Restore ccache cache
      id: restore-ccache-cache
      if: inputs.use_ccache_cache
      uses: actions/cache/restore@v3
      with:
        path: openwrt/.ccache
        key: ccache-${{ inputs.ccache_type }}-${{ env.TARGET }}/${{ env.SUBTARGET }}-${{ hashFiles('openwrt/include/kernel-**') }}
        restore-keys: |
          ccache-${{ inputs.ccache_type }}-${{ env.TARGET }}/${{ env.SUBTARGET }}-

    - name: Configure ccache and apply fixes
      if: inputs.use_ccache_cache 
      working-directory: openwrt
      env:
        SYSTEM_CCACHE_CONF: staging_dir/host/etc/ccache.conf
      run: |
        mkdir -p staging_dir/host/etc
        touch $SYSTEM_CCACHE_CONF
        echo compiler_type=gcc >> $SYSTEM_CCACHE_CONF
        echo CONFIG_CCACHE=y >> .config

    - name: Restore tools and toolchain cache
      id: restore-toolchain-cache
      if: inputs.use_prebuild_toolchain 
      uses: actions/cache/restore@v3
      with:
        path: openwrt/tools.tar
        key: ${{ env.TARGET }}-${{ env.SUBTARGET }}-external-toolchain-${{ hashFiles('openwrt/tools/**','openwrt/toolchain/**') }}
        restore-keys: ${{ env.TARGET }}-${{ env.SUBTARGET }}-external-toolchain-

    - name: Configure prebuild toolchain
      if: inputs.use_prebuild_toolchain && steps.restore-toolchain-cache.outputs.cache-hit == 'true'
      working-directory: openwrt
      run: |
        tar -xf tools.tar
        sed -i '/tools\/Makefile/d' Makefile
        sed -i 's/ $(tools\/stamp-compile)//;s/ $(tools\/stamp-check)//' Makefile
        
        echo CONFIG_DEVEL=y >> .config
        #echo CONFIG_AUTOREMOVE=y >> .config

        TOOLCHAIN_FILE="external-toolchain/$(ls external-toolchain/ | grep toolchain )"
        tar xf "$TOOLCHAIN_FILE" -C external-toolchain
        rm $TOOLCHAIN_FILE
        ./scripts/ext-toolchain.sh \
          --toolchain external-toolchain/$(ls external-toolchain/ | grep wrt-toolchain)/toolchain-* \
          --overwrite-config \
          --config ${{ env.TARGET }}/${{ env.SUBTARGET }}
        eval "$(grep -e ^CONFIG_TARGET_NAME= .config 2>/dev/null)"
        [[ -n ${CONFIG_TARGET_NAME} ]] && echo "CONFIG_TARGET_NAME=$CONFIG_TARGET_NAME" >> ${GITHUB_ENV}
        mkdir -p staging_dir/target-"$CONFIG_TARGET_NAME"_musl
        touch staging_dir/target-"$CONFIG_TARGET_NAME"_musl/.prepared

    - name: Show configuration
      working-directory: openwrt
      run: |
        make defconfig
        ./scripts/diffconfig.sh
      
    - name: Build tools and toolchain
      if: inputs.use_prebuild_toolchain 
      working-directory: openwrt
      run: make toolchain/install -j$(nproc) BUILD_LOG=1 || ret=$? ${GITHUB_WORKSPACE}/.github/workflows/scripts/show_build_failures.sh

    - name: Build everything
      id: compile
      working-directory: openwrt
      run: |
        make defconfig
        echo -e "$(nproc) thread compile"
        make -j$(nproc) BUILD_LOG=1 || ret=$? ${GITHUB_WORKSPACE}/.github/workflows/scripts/show_build_failures.sh

    - name: Save ccache cache
      if: inputs.use_ccache_cache && steps.restore-ccache-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: openwrt/.ccache
        key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin-${{ env.TARGET }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true'
      run: |
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> ${GITHUB_ENV}
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> ${GITHUB_ENV}
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> ${GITHUB_ENV}

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload logs
      if: ${{ !cancelled() }} && steps.compile.outcome=='success'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.TARGET }}-${{ env.SUBTARGET }}-logs
        path: "openwrt/logs"

    - name: Upload config
      if: ${{!cancelled()}}
      uses: actions/upload-artifact@v3
      with:
        name: build-config
        path: openwrt/.config

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
